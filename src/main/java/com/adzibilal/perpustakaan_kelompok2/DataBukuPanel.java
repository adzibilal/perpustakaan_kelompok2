/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.adzibilal.perpustakaan_kelompok2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class DataBukuPanel extends javax.swing.JPanel {

    private DefaultTableModel modelTabelBuku;

    /**
     * Creates new form DataBukuPanel2
     */
    public DataBukuPanel() throws SQLException {
        initComponents();
        String[] columns = {"ID BUKU", "Judul", "Penerbit", "Tahun Terbit"};
        modelTabelBuku = new DefaultTableModel(columns, 0);
        jTable1.setModel(modelTabelBuku);
        this.getData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idBukuField = new javax.swing.JTextField();
        judulField = new javax.swing.JTextField();
        penerbitField = new javax.swing.JTextField();
        tahunTerbitField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        jLabel1.setText("ID BUKU");

        jLabel2.setText("JUDUL");

        jLabel3.setText("PENERBIT");

        jLabel4.setText("TAHUN TERBIT");

        jButton1.setText("Tambah");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Perbarui");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cari");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton5.setText("Hapus");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(judulField, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                                    .addComponent(idBukuField)
                                    .addComponent(penerbitField)
                                    .addComponent(tahunTerbitField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idBukuField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(judulField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(penerbitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tahunTerbitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        searchBuku();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        deleteBuku();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        updateBuku();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        addBuku();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            // Ambil data dari model tabel berdasarkan baris yang dipilih
            int idBuku = (int) jTable1.getValueAt(selectedRow, 0);
            String judul = (String) jTable1.getValueAt(selectedRow, 1);
            String penerbit = (String) jTable1.getValueAt(selectedRow, 2);
            int tahunTerbit = (int) jTable1.getValueAt(selectedRow, 3);

            // Set nilai data ke dalam form field
            idBukuField.setText(String.valueOf(idBuku));
            judulField.setText(judul);
            penerbitField.setText(penerbit);
            tahunTerbitField.setText(String.valueOf(tahunTerbit));
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void getData() throws SQLException {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/db_perpustakaan", "root", "");
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM buku");

            // Menghapus data lama dari tabel
            modelTabelBuku.setRowCount(0);

            // Memuat data baru dari hasil query
            while (rs.next()) {
                int idBuku = rs.getInt("ID_Buku");
                String judul = rs.getString("Judul");
                String penerbit = rs.getString("Penerbit");
                int tahunTerbit = rs.getInt("Tahun_Terbit");

                Vector<Object> row = new Vector<>();
                row.add(idBuku);
                row.add(judul);
                row.add(penerbit);
                row.add(tahunTerbit);

                modelTabelBuku.addRow(row);
            }

            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method untuk mencari data buku berdasarkan judul
    private void searchBuku() {
        String searchQuery = searchField.getText();

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/db_perpustakaan", "root", "");
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM buku WHERE Judul LIKE ?");
            stmt.setString(1, "%" + searchQuery + "%");
            ResultSet rs = stmt.executeQuery();

            // Menghapus data lama dari tabel
            modelTabelBuku.setRowCount(0);

            // Memuat data baru dari hasil query
            while (rs.next()) {
                int idBuku = rs.getInt("ID_Buku");
                String judul = rs.getString("Judul");
                String penerbit = rs.getString("Penerbit");
                int tahunTerbit = rs.getInt("Tahun_Terbit");

                Vector<Object> row = new Vector<>();
                row.add(idBuku);
                row.add(judul);
                row.add(penerbit);
                row.add(tahunTerbit);

                modelTabelBuku.addRow(row);
            }

            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method untuk menambahkan data buku ke database
    private void addBuku() {
        String idBuku = idBukuField.getText();
        String judul = judulField.getText();
        String penerbit = penerbitField.getText();
        String tahunTerbit = tahunTerbitField.getText();
        // Pengecekan jika ada field yang kosong
        if (idBuku.isEmpty() || judul.isEmpty() || penerbit.isEmpty() || tahunTerbit.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Harap lengkapi semua field.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/db_perpustakaan", "root", "");
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO buku (ID_Buku, Judul, Penerbit, Tahun_Terbit) VALUES (?, ?, ?, ?)");
            stmt.setInt(1, Integer.parseInt(idBuku));
            stmt.setString(2, judul);
            stmt.setString(3, penerbit);
            stmt.setInt(4, Integer.parseInt(tahunTerbit));
            stmt.executeUpdate();

            stmt.close();
            conn.close();

            // Menampilkan kembali data setelah penambahan
            getData();
            clearFields();

            // Menampilkan JOptionPane untuk informasi berhasil menambahkan data
            JOptionPane.showMessageDialog(this, "Data buku berhasil ditambahkan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method untuk mengupdate data buku di database
    private void updateBuku() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris tabel untuk mengedit data.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idBuku = idBukuField.getText();
        String judul = judulField.getText();
        String penerbit = penerbitField.getText();
        String tahunTerbit = tahunTerbitField.getText();

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/db_perpustakaan", "root", "");
            PreparedStatement stmt = conn.prepareStatement("UPDATE buku SET Judul = ?, Penerbit = ?, Tahun_Terbit = ? WHERE ID_Buku = ?");
            stmt.setString(1, judul);
            stmt.setString(2, penerbit);
            stmt.setInt(3, Integer.parseInt(tahunTerbit));
            stmt.setInt(4, Integer.parseInt(idBuku));
            stmt.executeUpdate();

            stmt.close();
            conn.close();

            // Menampilkan kembali data setelah update
            getData();
            clearFields();
            // Menampilkan JOptionPane untuk informasi berhasil update data
            JOptionPane.showMessageDialog(this, "Data buku berhasil diupdate.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method untuk menghapus data buku dari database
    private void deleteBuku() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris tabel untuk menghapus data.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String idBuku = idBukuField.getText();

            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/db_perpustakaan", "root", "");
                PreparedStatement stmt = conn.prepareStatement("DELETE FROM buku WHERE ID_Buku = ?");
                stmt.setInt(1, Integer.parseInt(idBuku));
                stmt.executeUpdate();

                stmt.close();
                conn.close();

                // Menampilkan kembali data setelah penghapusan
                getData();
                clearFields();
                // Menampilkan JOptionPane untuk informasi berhasil menghapus data
                JOptionPane.showMessageDialog(this, "Data buku berhasil dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Method untuk membersihkan input field
    private void clearFields() {
        idBukuField.setText("");
        judulField.setText("");
        penerbitField.setText("");
        tahunTerbitField.setText("");
        jTable1.clearSelection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField idBukuField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField judulField;
    private javax.swing.JTextField penerbitField;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField tahunTerbitField;
    // End of variables declaration//GEN-END:variables
}
