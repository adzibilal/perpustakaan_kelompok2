package com.adzibilal.perpustakaan_kelompok2;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author Lenovo
 */
public class PeminjamanPanel extends javax.swing.JPanel {

    private Connection connection;
    private Statement statement;

    /**
     * Creates new form PeminjamanPanel
     */
    public PeminjamanPanel() {
        initializeDatabase();
        initComponents();
        loadMahasiswaComboBox();
        loadTableData();
    }

    private void initializeDatabase() {
        String url = "jdbc:mysql://localhost/db_perpustakaan";
        String username = "root";
        String password = "";

        try {
            connection = DriverManager.getConnection(url, username, password);
            statement = connection.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idPeminjamanLabel = new javax.swing.JLabel();
        mahasiswaLabel = new javax.swing.JLabel();
        mahasiswaLabel1 = new javax.swing.JLabel();
        idPeminjamanField = new javax.swing.JTextField();
        mahasiswaComboBox = new javax.swing.JComboBox<>();
        tanggalPeminjamanField = new javax.swing.JFormattedTextField();
        mahasiswaLabel2 = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        idPeminjamanLabel.setText("ID PEMINJAMAN");

        mahasiswaLabel.setText("MAHASISWA");

        mahasiswaLabel1.setText("TANGGAL");

        idPeminjamanField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idPeminjamanFieldActionPerformed(evt);
            }
        });

        mahasiswaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tanggalPeminjamanField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("YYYY-MM-DD"))));

        mahasiswaLabel2.setText("STATUS");

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dipinjam", "dikembalikan" }));

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Detail");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Tambah");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Cari");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idPeminjamanLabel)
                            .addComponent(mahasiswaLabel)
                            .addComponent(mahasiswaLabel1)
                            .addComponent(mahasiswaLabel2))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idPeminjamanField)
                            .addComponent(mahasiswaComboBox, 0, 570, Short.MAX_VALUE)
                            .addComponent(tanggalPeminjamanField)
                            .addComponent(statusComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton6)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idPeminjamanLabel)
                    .addComponent(idPeminjamanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mahasiswaLabel)
                    .addComponent(mahasiswaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mahasiswaLabel1)
                    .addComponent(tanggalPeminjamanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mahasiswaLabel2)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void idPeminjamanFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idPeminjamanFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idPeminjamanFieldActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        addPeminjaman();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        updatePeminjaman();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        deletePeminjaman();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        showDetailPopup();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Mendapatkan baris yang di-klik
        int selectedRow = jTable1.getSelectedRow();

        // Pastikan ada baris yang di-klik
        if (selectedRow != -1) {
            // Mendapatkan data dari tabel
            int idPeminjaman = (int) jTable1.getValueAt(selectedRow, 0);
            String npm = (String) jTable1.getValueAt(selectedRow, 2);
            Date tanggalPeminjaman = (Date) jTable1.getValueAt(selectedRow, 5);
            String status = (String) jTable1.getValueAt(selectedRow, 6);

            // Mengisi data ke dalam form
            idPeminjamanField.setText(String.valueOf(idPeminjaman));
            // Pilih item pada combobox berdasarkan npm yang diambil dari tabel
            for (int i = 0; i < mahasiswaComboBox.getItemCount(); i++) {
                String item = mahasiswaComboBox.getItemAt(i);
                if (item.startsWith(npm)) {
                    mahasiswaComboBox.setSelectedIndex(i);
                    break;
                }
            }
            tanggalPeminjamanField.setText(tanggalPeminjaman.toString());
            statusComboBox.setSelectedItem(status);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadMahasiswaComboBox() {
        try {
            // Retrieve data from the database

            String query = "SELECT NPM, Nama FROM mahasiswa";
            ResultSet resultSet = statement.executeQuery(query);

            // Clear existing items
            mahasiswaComboBox.removeAllItems();

            // Add items to the combo box
            while (resultSet.next()) {
                String npm = resultSet.getString("NPM");
                String nama = resultSet.getString("Nama");
                mahasiswaComboBox.addItem(npm + " - " + nama);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadTableData() {
        try {
            // Retrieve data from the database
            String query = "SELECT p.*, m.Nama, m.Jurusan, m.Alamat FROM peminjaman p JOIN mahasiswa m ON p.NPM = m.NPM;";
            ResultSet resultSet = statement.executeQuery(query);

            // Create table model
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.addColumn("ID Peminjaman");
            tableModel.addColumn("Nama");
            tableModel.addColumn("NPM");
            tableModel.addColumn("Jurusan");
            tableModel.addColumn("Alamat");
            tableModel.addColumn("Tanggal Peminjaman");
            tableModel.addColumn("Status");
            tableModel.addColumn("Tanggal Kembali");
            tableModel.addColumn("Denda");

            // Populate the table model with the retrieved data
            while (resultSet.next()) {
                int idPeminjaman = resultSet.getInt("ID_Pinjam");
                String nama = resultSet.getString("Nama");
                String npm = resultSet.getString("NPM");
                String jurusan = resultSet.getString("Jurusan");
                String alamat = resultSet.getString("Alamat");
                Date tanggalPeminjaman = resultSet.getDate("Tanggal_Pinjam");
                String status = resultSet.getString("Status");
                Date tanggalKembali = resultSet.getDate("Tanggal_Kembali");
                double denda = resultSet.getDouble("Denda");

                Object[] rowData = {idPeminjaman, nama, npm, jurusan, alamat, tanggalPeminjaman, status, tanggalKembali, denda};
                tableModel.addRow(rowData);
            }

            // Set the table model to the table
            jTable1.setModel(tableModel);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addPeminjaman() {
        String idPeminjaman = idPeminjamanField.getText();
        String npm = ((String) mahasiswaComboBox.getSelectedItem()).split(" - ")[0];
        String tanggalPeminjaman = tanggalPeminjamanField.getText();
        String status = ((String) statusComboBox.getSelectedItem());

        try {
            // Insert data into the database
            String query = "INSERT INTO peminjaman (ID_Pinjam, NPM, Tanggal_Pinjam, Status) VALUES (?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, Integer.parseInt(idPeminjaman));
            preparedStatement.setString(2, npm);
            preparedStatement.setString(3, tanggalPeminjaman);
            preparedStatement.setString(4, status);
            preparedStatement.executeUpdate();

            // Clear the form and reload table data
            clearForm();
            loadTableData();
            // Menampilkan JOptionPane untuk informasi berhasil menambahkan data
            JOptionPane.showMessageDialog(this, "Data peminjaman berhasil ditambahkan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updatePeminjaman() {
        String idPeminjaman = idPeminjamanField.getText();
        String npm = ((String) mahasiswaComboBox.getSelectedItem()).split(" - ")[0];
        String tanggalPeminjaman = tanggalPeminjamanField.getText();
        String status = ((String) statusComboBox.getSelectedItem());

        try {
            // Update data in the database
            String query = "UPDATE peminjaman SET NPM = ?, Tanggal_Pinjam = ?, Status = ? WHERE ID_Pinjam = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, npm);
            preparedStatement.setString(2, tanggalPeminjaman);
            preparedStatement.setString(3, status);
            preparedStatement.setInt(4, Integer.parseInt(idPeminjaman));
            preparedStatement.executeUpdate();

            // Clear the form and reload table data
            clearForm();
            loadTableData();
            // Menampilkan JOptionPane untuk informasi berhasil update data
            JOptionPane.showMessageDialog(this, "Data peminjaman berhasil diupdate.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void deletePeminjaman() {
        String idPeminjaman = idPeminjamanField.getText();

        try {
            // Delete data from the database
            String query = "DELETE FROM peminjaman WHERE ID_Pinjam = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, Integer.parseInt(idPeminjaman));
            preparedStatement.executeUpdate();

            // Clear the form and reload table data
            clearForm();
            loadTableData();

            // Menampilkan JOptionPane untuk informasi berhasil menghapus data
            JOptionPane.showMessageDialog(this, "Data peminjaman berhasil dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void showDetailPopup() {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            int idPeminjaman = (int) jTable1.getValueAt(selectedRow, 0);
            String npm = (String) jTable1.getValueAt(selectedRow, 2);

            // Create an instance of the DetailPeminjamanPanel class with the idPeminjaman parameter
            DetailPeminjamanPanel detailPanel = new DetailPeminjamanPanel(idPeminjaman);

            // Create a JFrame to hold the panel
            JFrame frame = new JFrame("Detail Peminjaman");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane().add(detailPanel); // Add the panel to the frame's content pane

            // Pack the components in the frame
            frame.pack();

            // Center the frame on the screen
            frame.setLocationRelativeTo(null);

            // Set the frame's visibility to true to display the panel
            frame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Pilih baris terlebih dahulu.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearForm() {
        idPeminjamanField.setText("");
        mahasiswaComboBox.setSelectedIndex(0);
        tanggalPeminjamanField.setText("");
        statusComboBox.setSelectedIndex(0);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField idPeminjamanField;
    private javax.swing.JLabel idPeminjamanLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> mahasiswaComboBox;
    private javax.swing.JLabel mahasiswaLabel;
    private javax.swing.JLabel mahasiswaLabel1;
    private javax.swing.JLabel mahasiswaLabel2;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JFormattedTextField tanggalPeminjamanField;
    // End of variables declaration//GEN-END:variables
}
